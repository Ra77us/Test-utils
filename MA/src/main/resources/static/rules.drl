import io.github.hephaestusmetrics.model.metrics.Metric;
import com.example.droolsprototype.DroolsPrototypeApplication;
import com.example.droolsprototype.demo.ExecutorWrapper
import com.kubiki.controller.commons.definitons.ActionInvoker
import com.kubiki.controller.sample.actions.ChangeDataSourceAction
import com.kubiki.controller.sample.dto.ChangeDataSourceArgs
import com.kubiki.controller.sample.dto.DataSource
import com.kubiki.controller.sample.actions.ScaleHeavyFlowAction
import com.kubiki.controller.sample.dto.ScaleHeavyFlowActionArgs
import com.kubiki.controller.sample.actions.infra.ResizeVolumeAction
import com.kubiki.controller.commons.actions.dtos.infra.ResizeVolumeActionArgs


// avg_over_time(http_server_requests_seconds_sum{uri="/test/get-data-slow"}[2m]) / avg_over_time(http_server_requests_seconds_count{uri="/test/get-data-slow"}[2m])
rule "test2"
    dialect "mvel"
    when
        executor : ExecutorWrapper()
        metric : Metric(
                    queryTag == "requestDuration",
                    value > 2
                    )
    then
        executor.execute(new ChangeDataSourceAction(new ChangeDataSourceArgs(DataSource.OLD_SOURCE, metric.getLabels().get("instance"))));
end

// avg_over_time(executor_queued_tasks{instance="util-service-1.kubiki:8080"}[3m])
// todo
rule "test3"
    dialect "mvel"
    when
        executor : ExecutorWrapper()
        metric : Metric(
                    queryTag == "scalableExecutorQueuedTasks",
                    value > 0.5
                )
    then
        executor.execute(new ScaleHeavyFlowAction(
                ScaleHeavyFlowActionArgs.builder()
                .downstreamCpu(1)
                .downstreamNamespace("kubiki")
                .downstreamPod("util-service-2")
                .upstreamThreads(15)
                .upstreamService(metric.getLabels().get("instance"))
                .build()
        ));
end

rule "kinia-test20"
    dialect "mvel"
    when
        executor : ExecutorWrapper()
        metric : Metric(
                    name == "volume_usages",
                    value > 10000000 && value < 15000000
          )
    then
        executor.execute(new ResizeVolumeAction(
                new ResizeVolumeActionArgs(
                    "pv-name",
                    "20Mi"
                ),
                0,
                60
        ));
end

rule "kinia-test21"
    dialect "mvel"
    when
        executor : ExecutorWrapper()
        metric : Metric(
                    name == "volume_usages",
                    value > 17000000
        )
    then
        executor.execute(new ResizeVolumeAction(
                new ResizeVolumeActionArgs(
                    "pv-name",
                    "40Mi"
                ),
                0,
                60
        ));
end

rule "kinia-test22"
    dialect "mvel"
    when
        executor : ExecutorWrapper()
        metric : Metric(
                    name == "volume_usages",
                    value > 1000000 && < 5000000
       )
    then
        executor.execute(new ResizeVolumeAction(
                new ResizeVolumeActionArgs(
                    "pv-name",
                    "10Mi"
                ),
                0,
                60
        ));
end
